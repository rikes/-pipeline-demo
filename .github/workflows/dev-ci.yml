# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [dev]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
    - uses: actions/checkout@v3
      with:
          fetch-depth: 0
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    # Sonar
    - name: Sonarlint QA
      run: echo "Code analysis with Sonar"
    
    # Build 
    - name: Build with Maven
      working-directory: pipeline-demo
      run: mvn install -DskipTests
      
    # Tests
    - name: Maven Test
      run: mvn test
    
    # Artifact jar
    - name: Upload Maven build artifact
      uses: actions/upload-artifact@v2
      with:
        name: pipeline-demo.jar
        path: pipeline-demo/target/pipeline-demo.jar
    
    # Sonar Complete
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache Maven packages
      uses: actions/cache@v1
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build and analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=rikes_pipeline-demo    
